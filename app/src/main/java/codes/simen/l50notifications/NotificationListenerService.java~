package codes.simen.l50notifications;

import android.annotation.SuppressLint;
import android.app.PendingIntent;
import android.content.Intent;
import android.content.SharedPreferences;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.os.Binder;
import android.os.Build;
import android.os.IBinder;
import android.preference.PreferenceManager;
import android.provider.Settings;
import android.service.notification.StatusBarNotification;
import android.text.TextUtils;
import android.util.Log;

import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.Writer;

import codes.simen.l50notifications.util.VoiceOver;


@SuppressLint("NewApi")
public class NotificationListenerService extends android.service.notification.NotificationListenerService {
    private final static String logTag = "NotificationListener";

    private VoiceOver voiceOver = null;
    private final IBinder mBinder = new LocalBinder();

    public NotificationListenerService() {
        Log.v(logTag, "Created listener");
    }

    @Override
    public void onNotificationPosted(StatusBarNotification statusBarNotification) {
        try {
            if (
                   (statusBarNotification.isOngoing() || !statusBarNotification.isClearable())
                && !statusBarNotification.getPackageName().equals("com.tencent.mobileqq")
                )
                    return;

            if (NotificationListenerAccessibilityService.doLoadSettings) doLoadSettings();

            DecisionMaker decisionMaker = new DecisionMaker();
            decisionMaker.handleActionAdd(statusBarNotification.getNotification(),
                    statusBarNotification.getPackageName(),
                    statusBarNotification.getTag(),
                    statusBarNotification.getId(),
                    getApplicationContext(),
                    "listener");

            /*Intent intent = new Intent();

            intent.setClass(getApplicationContext(), DecisionMaker.class)
                    .setAction(DecisionMaker.ACTION_ADD)

                    .putExtra(DecisionMaker.EXTRA_NOTIFICATION, statusBarNotification.getNotification())
                    .putExtra(DecisionMaker.EXTRA_PACKAGE_NAME, statusBarNotification.getPackageName())
                    .putExtra(DecisionMaker.EXTRA_TAG, statusBarNotification.getTag())
                    .putExtra(DecisionMaker.EXTRA_ID, statusBarNotification.getId())
                    .putExtra(DecisionMaker.EXTRA_SRC, "listener");

            startService(intent);*/
        } catch (NullPointerException e) {
            e.printStackTrace();
            Log.e(logTag, "NPE");
        }
    }

    private void doLoadSettings() {
        NotificationListenerAccessibilityService.doLoadSettings = false;
        if (PreferenceManager.getDefaultSharedPreferences(getApplicationContext()).getBoolean("music_on", false)) {
            if (voiceOver == null)
            voiceOver = new VoiceOver();
            voiceOver.enableVoiceOver(getApplicationContext());
        } else if (voiceOver != null)
            voiceOver.disableVoiceOver(getApplicationContext());

        if (isAccessibilityEnabled()) {
            Intent intent = new Intent();
            intent.setClass(getApplicationContext(), OverlayServiceLegacy.class);
            intent.setAction("TEST");
            intent.putExtra("packageName", getPackageName());
            intent.putExtra("title", getString(R.string.app_name));
            intent.putExtra("text", getString(R.string.intro_warning_both_services));
            intent.putExtra("action", PendingIntent.getActivity(getApplicationContext(), 0, new Intent(Settings.ACTION_ACCESSIBILITY_SETTINGS), 0));

            if (Build.VERSION.SDK_INT >= 11) {
                Bitmap bitmap = BitmapFactory.decodeResource(getResources(), R.drawable.abc_ic_clear);
                intent.putExtra("iconLarge", bitmap);
            }
            intent.putExtra("icon", R.drawable.abc_ic_clear);
            startService(intent);

        }
    }

    @Override
    public void onNotificationRemoved(StatusBarNotification statusBarNotification) {
        final String packageName = statusBarNotification.getPackageName();

        DecisionMaker decisionMaker = new DecisionMaker();
        decisionMaker.handleActionRemove(statusBarNotification.getNotification(),
                statusBarNotification.getPackageName(),
                statusBarNotification.getTag(),
                statusBarNotification.getId(),
                getApplicationContext(),
                "listener");
    }

    public class LocalBinder extends Binder {
        NotificationListenerService getService() {
            // Return this instance of LocalService so clients can call public methods
            return NotificationListenerService.this;
        }
    }

    @Override
    public IBinder onBind(Intent intent) {
        Log.d(logTag, "bind");
        if (intent.getAction().equals("REMOVE_NOTIFICATION")) {
            /*String pkg = intent.getStringExtra("packageName");
            String tag = intent.getStringExtra("tag");
            int id = intent.getIntExtra("id", 0);
            Log.d(logTag, pkg + tag + id);
            cancelNotification(pkg, tag, id);*/
            super.onBind(intent);
            return mBinder;
        } else {
            return super.onBind(intent);
        }
    }

    public void doRemove (String pkg, String tag, int id) {
        Log.d(logTag, pkg + tag + id);
        try {
            cancelNotification(pkg, tag, id);
        } catch (SecurityException e) {
            try {
                String report = e.getMessage();
                Writer writer = new StringWriter();
                PrintWriter printWriter = new PrintWriter(writer);
                e.printStackTrace(printWriter);
                report = report.concat( writer.toString() );
                SharedPreferences.Editor editor =
                        PreferenceManager.getDefaultSharedPreferences(getApplicationContext()).edit();
                editor.putString("lastBug", report);
                editor.apply();
            } catch (Exception e2) {
                e2.printStackTrace();
            }
        }
    }

    boolean isAccessibilityEnabled(){
        int accessibilityEnabled = 0;
        final String ACCESSIBILITY_SERVICE = "codes.simen.l50notifications/codes.simen.l50notifications.NotificationListenerAccessibilityService";
        boolean accessibilityFound = false;
        try {
            accessibilityEnabled = Settings.Secure.getInt(this.getContentResolver(),android.provider.Settings.Secure.ACCESSIBILITY_ENABLED);
        } catch (Settings.SettingNotFoundException e) {
            Log.d(logTag, "Error finding setting, default accessibility to not found: " + e.getMessage());
        }

        TextUtils.SimpleStringSplitter mStringColonSplitter = new TextUtils.SimpleStringSplitter(':');

        if (accessibilityEnabled==1){


            String settingValue = Settings.Secure.getString(getContentResolver(), Settings.Secure.ENABLED_ACCESSIBILITY_SERVICES);
            if (settingValue != null) {
                TextUtils.SimpleStringSplitter splitter = mStringColonSplitter;
                splitter.setString(settingValue);
                while (splitter.hasNext()) {
                    String accessibilityService = splitter.next();
                    Log.d(logTag, "Setting: " + accessibilityService);
                    if (accessibilityService.equalsIgnoreCase(ACCESSIBILITY_SERVICE)){
                        return true;
                    }
                }
            }

        }
        return false;
    }
}

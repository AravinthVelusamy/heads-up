package codes.simen.l50notifications.util;

import android.app.Notification;
import android.app.NotificationManager;
import android.app.PendingIntent;
import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.Intent;
import android.content.SharedPreferences;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.net.Uri;
import android.preference.PreferenceManager;
import android.support.v4.app.NotificationCompat;
import android.util.Log;

import java.io.IOException;
import java.io.Serializable;
import java.util.HashSet;
import java.util.Set;

import codes.simen.l50notifications.R;

public class UpdateReceiver extends BroadcastReceiver {
    public UpdateReceiver() {
    }

    public static final String logTag = "UpdateReceiver";

    @Override
    public void onReceive(Context context, Intent intent) {
        Log.v(logTag, "receive");
        if (intent.getAction().equals(Intent.ACTION_MY_PACKAGE_REPLACED)) {
            Log.v(logTag, "receive");
            SharedPreferences oldPreferences = context.getSharedPreferences("heads-up", 0);
            SharedPreferences preferences = PreferenceManager.getDefaultSharedPreferences(context.getApplicationContext());
            SharedPreferences.Editor oldEditor = oldPreferences.edit();
            SharedPreferences.Editor editor = preferences.edit();
            if (oldPreferences.contains("noshowlist")) {
                Log.v(logTag, "noshowlist");
                try {
                    oldPreferences.getString("noshowlist", null);
                } catch (ClassCastException cce) {
                    Set<String> noshowlist = oldPreferences.getStringSet("noshowlist", new HashSet<String>());
                    try {
                        oldEditor.remove("noshowlist");
                        editor.putString("noshowlist", ObjectSerializer.serialize( (Serializable) noshowlist));
                    } catch (IOException e) {
                        editor.putString("noshowlist", null);
                        e.printStackTrace();
                    }
                }
            }
            if (oldPreferences.contains("blacklist")) {
                Log.v(logTag, "blacklist");
                try {
                    oldPreferences.getString("blacklist", null);
                } catch (ClassCastException cce) {
                    Set<String> blacklist = oldPreferences.getStringSet("blacklist", new HashSet<String>());
                    try {
                        oldEditor.remove("blacklist");
                        editor.putString("blacklist", ObjectSerializer.serialize( (Serializable) blacklist));
                    } catch (IOException e) {
                        editor.putString("blacklist", null);
                        e.printStackTrace();
                    }
                }
            }

            if (preferences.getInt("prev_v", 28) < 31) {
                Log.d(logTag, "pollnotification");
                NotificationCompat.Builder builder = new NotificationCompat.Builder(context);

                Intent notificationIntent = new Intent(Intent.ACTION_VIEW);
                notificationIntent.setData(Uri.parse("http://simen.codes/stuff/future-of-heads-up/"));
                PendingIntent pendingIntent = PendingIntent.getActivity(context,
                        0, notificationIntent, PendingIntent.FLAG_CANCEL_CURRENT);

                Bitmap bitmap = BitmapFactory.decodeResource(
                        context.getResources(), R.drawable.ic_stat_headsup
                );
                builder .setTicker("The future of Heads-up")
                        .setContentTitle("The future of Heads-up")
                        .setContentText(
                                "What do YOU want in Heads-up?"
                        )
                        .setSmallIcon(R.drawable.ic_stat_headsup)
                        .setLargeIcon(bitmap)
                        .setDefaults(Notification.DEFAULT_ALL)
                        .setContentIntent(pendingIntent)
                        .setAutoCancel(true)
                        .setVibrate(null)
                        .setSound(null)
                        .setPriority(NotificationCompat.PRIORITY_MIN)
                        .setStyle(new NotificationCompat.BigTextStyle().bigText(
                                "Hi! Thanks for using Heads-up. I\'m currently deciding on the future of this app. There\'s a lot of decisions to make, and I\'d like to hear your opinion. Tap here if you want to help make Heads-up even better!"
                        ));

                Notification notification;
                notification = builder.build();

                NotificationManager notificationManager =
                        (NotificationManager) context.getSystemService(Context.NOTIFICATION_SERVICE);
                notificationManager.notify("poll", 1, notification);
            } else {
                Log.v(logTag, "noPoll");
            }

            editor.putInt("prev_v", 31);

            oldEditor.apply();
            editor.apply();
        }
    }
}

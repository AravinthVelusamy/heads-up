package codes.simen.l50notifications;

import android.animation.Animator;
import android.animation.AnimatorListenerAdapter;
import android.annotation.TargetApi;
import android.app.ActivityManager;
import android.app.KeyguardManager;
import android.app.PendingIntent;
import android.app.Service;
import android.content.Context;
import android.content.Intent;
import android.content.SharedPreferences;
import android.content.pm.PackageManager;
import android.content.res.Resources;
import android.graphics.Bitmap;
import android.graphics.PixelFormat;
import android.graphics.drawable.Drawable;
import android.hardware.Sensor;
import android.hardware.SensorEvent;
import android.hardware.SensorEventListener;
import android.hardware.SensorManager;
import android.os.Build;
import android.os.Bundle;
import android.os.Handler;
import android.os.IBinder;
import android.os.PowerManager;
import android.preference.PreferenceManager;
import android.util.Log;
import android.util.TypedValue;
import android.view.Gravity;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.view.ViewPropertyAnimator;
import android.view.ViewStub;
import android.view.WindowManager;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.TextView;
import android.widget.Toast;

import java.io.IOException;
import java.io.PrintWriter;
import java.io.Serializable;
import java.io.StringWriter;
import java.io.Writer;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashSet;
import java.util.Set;

import codes.simen.l50notifications.theme.HoloDark;
import codes.simen.l50notifications.theme.HoloLight;
import codes.simen.l50notifications.theme.L5Dark;
import codes.simen.l50notifications.theme.L5Light;
import codes.simen.l50notifications.theme.ThemeClass;
import codes.simen.l50notifications.util.ObjectSerializer;
import codes.simen.l50notifications.util.SwipeDismissTouchListenerXY;

public class OverlayServiceCommon extends Service implements SensorEventListener {
    public final static String logTag = "Overlay";
    public static final int MAX_DISPLAY_TIME = 60000;
    public static final Set<String> LOCKSCREEN_APPS = new HashSet<String>(Arrays.asList(new String[]{
            "com.achep.acdisplay",
            "com.silverfinger.lockscreen",
            "com.greatbytes.activenotifications",
            "com.nemis.memlock",
            "com.teslacoilsw.widgetlocker"
    }));

    public WindowManager windowManager;
    public WindowManager.LayoutParams layoutParams;
    public LinearLayout layout;
    boolean isViewAdded = false;
    private ThemeClass themeClass = new ThemeClass();

    private SharedPreferences preferences = null;

    public static String text = "Something went wrong";
    public PendingIntent pendingIntent;
    public int displayTime = 15000;
    public int position = 1;
    public boolean dark_mode = false;
    public String currentPackage = "";
    public boolean isCompact = false;

    private SensorManager sensorManager = null;
    private Sensor sensor;
    private SensorEventListener sensorEventListener;
    private boolean isProximityFar = true;
    private boolean isDelaying = false;

    String packageName = "";
    String tag = "";
    String prevPackageName = "0";

    int id = 0;

    @Override
    public void onCreate () {
        super.onCreate();
        try {
            Log.d(logTag, "Create");
            preferences = PreferenceManager.getDefaultSharedPreferences(getApplicationContext());
            displayTime = preferences.getInt("overlay_display_time", 15000);
            windowManager = (WindowManager) getSystemService(WINDOW_SERVICE);
            LayoutInflater inflater = LayoutInflater.from(this);

            layout = new LinearLayout(this);
            inflater.inflate(R.layout.activity_read, layout);
            layout.setVisibility(View.GONE);
            ViewStub stub = (ViewStub) layout.findViewById(R.id.viewStub);

            final int theme = Integer.parseInt(preferences.getString("overlay_style", "0"));
            switch (theme) {
                case 0: // L
                    themeClass = new L5Light();
                    break;
                case 1: // L Dark
                    themeClass = new L5Dark();
                    break;
                case 2: // Holo Light
                    themeClass = new HoloLight();
                    break;
                case 3: // Holo
                    themeClass = new HoloDark();
                    break;
                case 4: //Custom
                    break;
            }
            themeClass.init(stub);
            stub.inflate();

            layoutParams = new WindowManager.LayoutParams(
                    WindowManager.LayoutParams.MATCH_PARENT,
                    WindowManager.LayoutParams.WRAP_CONTENT,
                    WindowManager.LayoutParams.TYPE_PRIORITY_PHONE,
                    WindowManager.LayoutParams.FLAG_NOT_FOCUSABLE,
                    PixelFormat.TRANSLUCENT
            );
            position = Integer.valueOf( preferences.getString("overlay_vertical_position", "1") );
            switch (position) {
                case 2:
                    layoutParams.flags |= WindowManager.LayoutParams.FLAG_LAYOUT_IN_SCREEN;
                    layoutParams.type = WindowManager.LayoutParams.TYPE_SYSTEM_ERROR;
                    layoutParams.gravity = Gravity.TOP | Gravity.CENTER_HORIZONTAL;
                    break;
                case 1:
                    layoutParams.gravity = Gravity.TOP | Gravity.CENTER_HORIZONTAL;
                    break;
                case 0:
                    layoutParams.gravity = Gravity.CENTER_VERTICAL | Gravity.CENTER_HORIZONTAL;
                    break;
                case -1:
                    layoutParams.gravity = Gravity.BOTTOM | Gravity.CENTER_HORIZONTAL;
                    break;
            }

            try {
                ActivityManager am = (ActivityManager) getSystemService(ACTIVITY_SERVICE);
                currentPackage = am.getRunningTasks(1).get(0).topActivity.getPackageName();
            } catch (SecurityException e) {
                reportError(e, "Please allow Heads-up to get running tasks", getApplicationContext());
            }


            if (Build.VERSION.SDK_INT <= 10)
                layout.findViewById(R.id.bottom_bar).setVisibility(View.VISIBLE);

            isCompact = preferences.getBoolean("compact_mode", false);

        } catch (VerifyError ve) {
            Log.w(logTag, ve.getMessage());
        }
    }

    private void displayWindow () {
        if (preferences.getBoolean("lock_screen_on", false)) {
            layoutParams.type = WindowManager.LayoutParams.TYPE_SYSTEM_ERROR;
            if (preferences.getBoolean("keep_on_lock_screen", false)) {
                if (Build.VERSION.SDK_INT >= 16) {
                    KeyguardManager keyguardManager = (KeyguardManager) getSystemService(KEYGUARD_SERVICE);
                    if (keyguardManager.isKeyguardLocked() || LOCKSCREEN_APPS.contains(currentPackage))
                        displayTime = MAX_DISPLAY_TIME;
					else {
						/*Log.d(logTag, "not locked");
						stopSelf();
						return;/**/
					}
                } else {
                    PowerManager powerManager = (PowerManager) getSystemService(POWER_SERVICE);
                    if (!powerManager.isScreenOn() || LOCKSCREEN_APPS.contains(currentPackage))
                        displayTime = MAX_DISPLAY_TIME;
                }

            }
            if (preferences.getBoolean("turn_screen_on", false)) {
                if (preferences.getBoolean("use_proximity", false)) {
                    sensorManager = (SensorManager) getSystemService(SENSOR_SERVICE);
                    sensor = sensorManager.getDefaultSensor(Sensor.TYPE_PROXIMITY);
                    if (sensor != null) {
                        sensorEventListener = this;
                        sensorManager.registerListener(this, sensor, SensorManager.SENSOR_DELAY_NORMAL);
                        handler.postDelayed(sensorChecker, 500);
                    } else {
                        reportError(null, "No proximity sensor detected. Pocket detection will not work.", getApplicationContext());
                        layoutParams.flags |= WindowManager.LayoutParams.FLAG_TURN_SCREEN_ON;
                        addViewToWindowManager();
                    }
                } else {
                    layoutParams.flags |= WindowManager.LayoutParams.FLAG_TURN_SCREEN_ON;
                    addViewToWindowManager();
                }
            } else {
                addViewToWindowManager();
            }
        } else {
            try {
                if ( currentPackage != null && LOCKSCREEN_APPS.contains(currentPackage) ) {
                    stopSelf();
                }
            } catch (Exception e) {
                e.printStackTrace();
            }
            addViewToWindowManager();
        }
    }

    private void addViewToWindowManager() {
        if (!isViewAdded) {
            windowManager.addView(layout, layoutParams);
			layout.requestFocus();
	    }
        isViewAdded = true;
    }

    private final Runnable sensorChecker = new Runnable() {
        @Override
        public void run() {
            Log.d(logTag + "SensorChecker", String.valueOf(isProximityFar));
            if (isProximityFar)
                layoutParams.flags |= WindowManager.LayoutParams.FLAG_TURN_SCREEN_ON;

            layout.setLayoutParams(layoutParams);
            addViewToWindowManager();

            if (sensorManager != null) {
                sensorManager.unregisterListener(sensorEventListener, sensor);
                sensorManager = null;
            }
        }
    };

    @TargetApi(Build.VERSION_CODES.HONEYCOMB)
    @Override
    public int onStartCommand(final Intent intent, int flags, int startId) {
        super.onStartCommand(intent, flags, startId);
        Log.d(logTag, "Start");
        try {
            if (intent.getAction().equals("REMOVE")) {
                try {
                    if (packageName.equals(intent.getStringExtra("packageName"))
                            && tag.equals(intent.getStringExtra("tag"))
                            && id == intent.getIntExtra("id", 0)) {
                        Log.d(logTag, "remove");
                        if (!isDelaying)
                            doFinish(0);
                    }
                } catch (Exception e) {
                    //reportError(e, "remove failed", getApplicationContext());
                    stopSelf();
                }
                if (packageName.equals("")) stopSelf();
                return START_NOT_STICKY;
            }
            displayWindow();
            PackageManager pm = getPackageManager();
            Resources appRes = null;
            Bundle extras = intent.getExtras();

            handler.removeCallbacks(runnable);
            handler.removeCallbacks(delayStop);

            text = extras.getString("text");
            String title = extras.getString("title");
            packageName = extras.getString("packageName");
            tag = extras.getString("tag");
            id = extras.getInt("id", 0);
            final float sizeMultiplier = (float) (preferences.getInt("font_size", 100) / 100.0);

            Log.v(logTag, currentPackage);
            if ( preferences.getBoolean("block_current_app", true)
              && packageName.equals(currentPackage)
              && !packageName.equals("codes.simen.l50notifications")
            ) {
                Log.d(logTag, "Current package match - stopping");
                stopSelf();
                return START_NOT_STICKY;
            }
            Set<String> blockedApps = (Set<String>) ObjectSerializer.deserialize(preferences.getString("noshowlist", ""));
            if (blockedApps != null && blockedApps.size() > 0 && blockedApps.contains(currentPackage)) {
                Log.d(logTag, "Current package match - stopping");
                stopSelf();
                return START_NOT_STICKY;
            }

            try {
                appRes = pm.getResourcesForApplication(packageName);
            } catch (PackageManager.NameNotFoundException e) {
                reportError(e, "", getApplicationContext());
            } catch (NullPointerException e) {
                reportError(e, "", getApplicationContext());
            }

            View dismissButton = themeClass.getDismissButton(layout);
            if (preferences.getBoolean("hide_dismiss_button", false))
                themeClass.hideDismissButton(dismissButton);

            if (Build.VERSION.SDK_INT >= 16) {
                try {
                    ViewGroup actionButtons = themeClass.getActionButtons(layout);
                    themeClass.removeActionButtons(actionButtons);
                    int i = extras.getInt("actionCount");
                    if (i > 0) {
                        Log.d(logTag, String.valueOf(i));
                        themeClass.showActionButtons(layout, i);
                        while (i > 0) {
                            String actionTitle = extras.getString("action" + i + "title");
                            final PendingIntent actionIntent = (PendingIntent)
                                    extras.get("action" + i + "intent");

                            int actionIcon = extras.getInt("action" + i + "icon");
                            Drawable icon = null;
                            if (appRes != null) {
                                try {
                                    icon = appRes.getDrawable(actionIcon);
                                } catch (Resources.NotFoundException nfe) {
                                }
                            }

                            themeClass.addActionButton(actionButtons, actionTitle, icon, new View.OnClickListener() {
                                @Override
                                public void onClick(View view) {
                                    try {
                                        openIntent(actionIntent, false);
                                        Log.d(logTag, "sendPendingAction");
                                    } catch (NullPointerException e) {
                                        reportError(e, "", getApplicationContext());
                                    }
                                }
                            }, sizeMultiplier);

                            i--;
                        }
                        if (isCompact)
                            themeClass.hideActionButtons(layout);
                    } else
                        themeClass.hideActionButtons(layout);
                } catch (NullPointerException npe) {//Ikke interessant, skjer som oftest pga manglende ikon
                } catch (RuntimeException rte) {
                    reportError(rte, "ThemeActionIcon", getApplicationContext());
                }
            } else {
                themeClass.hideActionButtons(layout);
            }

            try {
                pendingIntent = (PendingIntent) extras.get("action");
            } catch (NullPointerException npe) {
                reportError(npe, "", getApplicationContext());
            }

            ImageView imageView = themeClass.getIconView(layout);
            imageView.setOnClickListener(new View.OnClickListener() {
                @Override
                public void onClick(View v) {
                    onPopupClick(v);
                }
            });
            if (preferences.getBoolean("floating_window", false)) {
                Log.d(logTag, "floating window");
                imageView.setOnLongClickListener(new View.OnLongClickListener() {
                    @Override
                    public boolean onLongClick(View v) {
                        Log.d(logTag, "open as floating");
                        openIntent(pendingIntent, true);
                        return true;
                    }
                });
            }
            try {
                if (Build.VERSION.SDK_INT >= 11) {
                    Drawable drawable = null;
                    Bitmap bitmap = (Bitmap) extras.get("iconLarge");
                    if (appRes != null && extras.containsKey("icon")) {
                        int icon_id = extras.getInt("icon");
                        drawable = appRes.getDrawable(icon_id);
                    } else {
                        try {
                            drawable = pm.getApplicationIcon(packageName);
                        } catch (PackageManager.NameNotFoundException e) {
                            //reportError(e, "", getApplicationContext());
                        } catch (NullPointerException e) {
                            //reportError(e, "", getApplicationContext());
                        }
                    }
                    if (bitmap != null)
                        //bitmap = ThumbnailUtils.extractThumbnail(bitmap, 48, 48, ThumbnailUtils.OPTIONS_RECYCLE_INPUT)
                        themeClass.setIcon(imageView, bitmap, preferences.getBoolean("round_icons", true));
                    else if (drawable != null)
                        themeClass.setIcon(imageView, drawable, preferences.getBoolean("round_icons", true));
                    drawable = null;
                    bitmap = null;
                }
            } catch (Exception e) {}
            if (title.equals("")) {
                try {
                    title = (String) pm.getApplicationLabel(pm.getApplicationInfo(packageName, 0));
                } catch (PackageManager.NameNotFoundException e) {
                    reportError(e, "", getApplicationContext());
                } catch (NullPointerException e) {
                    reportError(e, "", getApplicationContext());
                }
            }


            TextView titleTextView = (TextView) layout.findViewById(R.id.notification_title);
            if (titleTextView != null)
                titleTextView.setText(title);
            TextView textView = (TextView) layout.findViewById(R.id.notification_subtitle);
            textView.setText(text);
            if (isCompact)
                textView.setMaxLines(2);

            Log.d(logTag, String.valueOf(sizeMultiplier * titleTextView.getTextSize()));
            titleTextView.setTextSize(TypedValue.COMPLEX_UNIT_PX, sizeMultiplier * titleTextView.getTextSize());
            textView.setTextSize(TypedValue.COMPLEX_UNIT_PX, sizeMultiplier * textView.getTextSize());

            final Context context = this;
            dismissButton.setOnLongClickListener(new View.OnLongClickListener() {
                @Override
                public boolean onLongClick(View v) {
                    Toast.makeText(context, getText(R.string.blocked_confirmation), Toast.LENGTH_SHORT).show();
                    try {
                        Set<String> blacklist = (Set<String>) ObjectSerializer.deserialize(preferences.getString("blacklist", ""));
                        if (blacklist == null) blacklist = new HashSet<String>();
                        blacklist.add(packageName);
                        SharedPreferences.Editor editor = preferences.edit();
                        editor.putString("blacklist", ObjectSerializer.serialize((Serializable) blacklist));
                        editor.apply();
                    } catch (IOException e) {
                        e.printStackTrace();
                    } catch (ClassNotFoundException e) {
                        e.printStackTrace();
                    }
                    doFinish(1);
                    return true;
                }
            });

            if (Build.VERSION.SDK_INT >= 12) {
                ViewGroup self = (ViewGroup) layout.findViewById(R.id.notificationbg);

                // Init swipe listener
                final SwipeDismissTouchListenerXY dismissTouchListener = new SwipeDismissTouchListenerXY(
                        themeClass.getRootView(layout), null, new SwipeDismissTouchListenerXY.DismissCallbacks() {
                    @Override
                    public boolean canDismiss(Object token) {
                        return true;
                    }

                    @Override
                    public void onDismiss(View view, Object token) {
                        view.setVisibility(View.GONE);
                        try {
                            if (preferences.getBoolean("dismiss_on_swipe", true))
                                doFinish(1);
                            else
                                doFinish(0);
                        } catch (Exception e) {
                            reportError(e, "", getApplicationContext());
                        }
                    }
                }
                );
                self.setClipChildren(false);
                self.setClipToPadding(false);
                for (View v : getAllChildren(layout)) {
                    v.setOnTouchListener(dismissTouchListener);
                }

                // Animate in
                if (!prevPackageName.equals(packageName)) {
                    AnimatorListenerAdapter listener = new AnimatorListenerAdapter() {
                        @Override
                        public void onAnimationEnd(Animator animation) {
                            super.onAnimationEnd(animation);
                            if (displayTime < MAX_DISPLAY_TIME || !intent.getAction().equals("STAY")) {
                                handler.postDelayed(runnable, displayTime);
                                System.gc();
                            }
                        }
                    };
                    self.setTranslationX(0);
                    switch (position) {
                        case 2:
                        case 1:
                            self.setTranslationY(-300);
                            break;
                        case 0:
                            self.setTranslationX(-self.getWidth());
                            break;
                        case -1:
                            self.setTranslationY(300);
                    }
                    self.setAlpha(0.0f);
                    Float opacity = (float) preferences.getInt("opacity", 98);
                    if (opacity == null)
                        opacity = 98f;
                    try {
                        self.animate()
                                .setDuration(700)
                                .alpha(opacity / 100)
                                .translationY(0)
                                .translationX(0)
                                .setListener(listener);
                    } catch (NullPointerException npe) {
                        reportError(npe, "", getApplicationContext());
                        if (displayTime < MAX_DISPLAY_TIME || !intent.getAction().equals("STAY"))
                            handler.postDelayed(runnable, displayTime);
                    }
                    prevPackageName = packageName;
                } else {
                    if (displayTime < MAX_DISPLAY_TIME || !intent.getAction().equals("STAY")) {
                        handler.postDelayed(runnable, displayTime);
                    }
                }
            } else {
                textView.setMaxLines(12);
                if (displayTime < MAX_DISPLAY_TIME || !intent.getAction().equals("STAY")) {
                    handler.postDelayed(runnable, displayTime);
                }
            }

            /*
             Løser ikke problemet, se feilrapport 22
            try {
                ActivityManager am = (ActivityManager) getSystemService(ACTIVITY_SERVICE);
                List<ActivityManager.RunningTaskInfo> runningTasks = am.getRunningTasks(3);
                for (ActivityManager.RunningTaskInfo taskInfo : runningTasks) {
                    if (taskInfo.topActivity.getPackageName().equals(packageName) || (
                            preferences.getBoolean("lock_screen_on", false) && LOCKSCREEN_APPS.contains(taskInfo.topActivity.getPackageName())
                    ))
                        stopSelf();
                }
            } catch (SecurityException e) {
                reportError(e, "", getApplicationContext());
            }*/

            layout.setVisibility(View.VISIBLE);

        } catch (Exception catchAllException) {
            reportError(catchAllException, "", getApplicationContext());
            stopSelf();
        }

        return START_NOT_STICKY;
    }

    private ArrayList<View> getAllChildren(View v) {
        if (!(v instanceof ViewGroup)) {
            ArrayList<View> viewArrayList = new ArrayList<View>();
            viewArrayList.add(v);
            return viewArrayList;
        }

        ArrayList<View> result = new ArrayList<View>();

        ViewGroup viewGroup = (ViewGroup) v;
        for (int i = 0; i < viewGroup.getChildCount(); i++) {

            View child = viewGroup.getChildAt(i);

            ArrayList<View> viewArrayList = new ArrayList<View>();
            viewArrayList.add(v);
            viewArrayList.addAll(getAllChildren(child));

            result.addAll(viewArrayList);
        }
        return result;
    }

    final Handler handler = new Handler();
    final Runnable runnable = new Runnable() {
        @Override
        public void run() {
            doFinish(0);
        }
    };

    public void doStop(View v) {
        doFinish(1);
    }

    public void doHide(View v) {
        doFinish(0);
    }

    public void onPopupClick (View v) {
        if (!isCompact)
            openIntent(pendingIntent, false);
        else {
            TextView subtitle = (TextView) layout.findViewById(R.id.notification_subtitle);
            if (subtitle.getLineCount() <= 2 && subtitle.length() < 60 && layout.findViewById(R.id.button_container).getVisibility() != View.VISIBLE) {
                openIntent(pendingIntent, false);
            }
            isCompact = false;
            themeClass.showActionButtons(layout, -1);
            subtitle.setMaxLines(12);
            if (displayTime < MAX_DISPLAY_TIME) {
                handler.removeCallbacks(runnable);
                handler.postDelayed(runnable, displayTime);
            }
        }
    }

    public void openIntent (PendingIntent mPendingIntent, boolean isFloating) {
        try {
            dismissKeyguard();
            Log.d(logTag, "sendPending");
            if (isFloating) {
                Intent intent = new Intent();
                intent.setFlags(0x00002000); //FLAG_FLOATING_WINDOW
                mPendingIntent.send(getApplicationContext(), 0, intent);
            }
            mPendingIntent.send();
            doFinish(2);
        } catch (PendingIntent.CanceledException e) {
            //reportError(e, "App has canceled action", getApplicationContext());
            Toast.makeText(getApplicationContext(), getString(R.string.pendingintent_cancel_exception), Toast.LENGTH_SHORT).show();
            doFinish(0);
        } catch (NullPointerException e) {
            //reportError(e, "No action defined", getApplicationContext());
            Toast.makeText(getApplicationContext(), getString(R.string.pendingintent_null_exception), Toast.LENGTH_SHORT).show();
            doFinish(0);
        }
    }

    public void dismissKeyguard () {
        if (Build.VERSION.SDK_INT >= 16) {
            if (!preferences.getBoolean("dismiss_keyguard", false)) return;

            KeyguardManager keyguardManager = (KeyguardManager) getSystemService(KEYGUARD_SERVICE);
            if (keyguardManager.isKeyguardLocked()) {
                Log.d(logTag, "attempt exit");
                Intent intent = new Intent();
                intent.setClass(getApplicationContext(), KeyguardRelock.class);
                intent.setAction(Intent.ACTION_SCREEN_ON);
                startService(intent);
            }
        }
    }

    private void doFinish(final int doDismiss) {
        // 0=ikke fjern 1=fjern 2=åpnet
        if (Build.VERSION.SDK_INT >= 12) {
            try {
                View self = layout.findViewById(R.id.notificationbg);
                ViewPropertyAnimator animator = self.animate()
                        .setDuration(300)
                        .alpha(0.0f)
                        .setListener(new AnimatorListenerAdapter() {
                            @Override
                            public void onAnimationEnd(Animator animation) {
                                layout.setVisibility(View.GONE);
                                if (doDismiss == 1)
                                    doDismiss(true);
                                else if (doDismiss == 2)
                                    doDismiss(false);
                                else
                                    stopSelf();
                            }
                        });
                if (doDismiss == 1) animator.translationX(400);
                else if (doDismiss == 0) {
                    switch (position) {
                        case 2:
                        case 1:
                            animator.translationY(-300);
                            break;
                        case -1:
                            animator.translationY(300);
                            break;
                    }
                }
            } catch (Exception e) {
                reportError(e, "", getApplicationContext());
                e.printStackTrace();
                layout.setVisibility(View.GONE);
                if (doDismiss == 1)
                    doDismiss(true);
                else if (doDismiss == 2)
                    doDismiss(false);
                else
                    stopSelf();
            }
        } else {
            layout.setVisibility(View.GONE);
            if (doDismiss == 1)
                doDismiss(true);
            else if (doDismiss == 2)
                doDismiss(false);
            else {
                stopSelf();
            }
        }
        prevPackageName = "0";
    }

    public void doDismiss (boolean stopNow) {
        if (stopNow) {
            stopSelf();
        } else {
            layout.setVisibility(View.GONE);
            Log.v(logTag, "delayStop");
            isDelaying = true;
            handler.postDelayed(delayStop, 10000);
        }

    }

    final Runnable delayStop = new Runnable() {
        @Override
        public void run() {
            stopSelf();
            isDelaying = false;
        }
    };

    @Override
    public void onDestroy () {
        super.onDestroy();
        Log.d(logTag, "Destroy");

        if (isViewAdded)           windowManager.removeViewImmediate(layout);
        if (sensorManager != null) sensorManager.unregisterListener(this, sensor);

        themeClass.destroy(layout);

        System.gc();
    }

    @Override
    public IBinder onBind(Intent intent) {
        return null;
    }


    public static void reportError(Exception e, String msg, Context c) {
        try {
            SharedPreferences preferences = PreferenceManager.getDefaultSharedPreferences(c.getApplicationContext());
            SharedPreferences.Editor editor = preferences.edit();
            if (e != null) {
                e.printStackTrace();
                Writer writer = new StringWriter();
                PrintWriter printWriter = new PrintWriter(writer);
                e.printStackTrace(printWriter);
                msg = msg.concat(writer.toString());
                editor.putString("lastException", ObjectSerializer.serialize(e));
            }
            editor.putString("lastBug", msg);
            editor.apply();
        } catch (Exception e2) {
            e2.printStackTrace();
        }
    }

    @Override
    public void onSensorChanged(SensorEvent event) {
        Log.v(logTag + "Sensor", String.valueOf(event.values[0]));
        isProximityFar = ( event.values[0] == sensor.getMaximumRange() );
    }

    @Override
    public void onAccuracyChanged(Sensor sensor, int accuracy) {
        Log.v(logTag + "SensorAccuracy", String.valueOf(accuracy));
    }
}